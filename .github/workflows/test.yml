# Automated Testing Pipeline
# Runs comprehensive tests including integration tests

name: Test Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.11'

jobs:
  # Unit tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-mock pytest-xdist

      - name: Run unit tests
        run: |
          pytest tests/ -v --cov=data_pipeline --cov-report=xml --cov-report=html -n auto

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  # Integration tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests

    services:
      # Mock IGDB API service
      mock-igdb:
        image: mockserver/mockserver:latest
        ports:
          - 8080:1080
        env:
          MOCKSERVER_INITIALIZATION_JSON_PATH: /config/mock-igdb.json

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-mock requests

      - name: Run integration tests
        run: |
          pytest tests/integration/ -v --tb=short
        env:
          IGDB_CLIENT_ID: test_client_id
          IGDB_CLIENT_SECRET: test_client_secret  # pragma: allowlist secret

  # Docker tests
  docker-tests:
    name: Docker Tests
    runs-on: ubuntu-latest
    needs: unit-tests

    strategy:
      matrix:
        service: [ingestion, processing, training]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: data_pipeline/${{ matrix.service }}/Dockerfile
          push: false
          tags: igdb-${{ matrix.service }}:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          # Test that container starts and shows help
          docker run --rm igdb-${{ matrix.service }}:test --help

          # Test health check
          docker run -d --name test-container igdb-${{ matrix.service }}:test
          sleep 10
          docker exec test-container curl -f http://localhost:8000/health || echo "Health check not implemented yet"
          docker stop test-container
          docker rm test-container

  # Performance tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-benchmark

      - name: Run performance tests
        run: |
          pytest tests/performance/ -v --benchmark-only --benchmark-save=performance_results
        env:
          IGDB_CLIENT_ID: ${{ secrets.IGDB_CLIENT_ID }}  # pragma: allowlist secret
          IGDB_CLIENT_SECRET: ${{ secrets.IGDB_CLIENT_SECRET }}  # pragma: allowlist secret

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: .benchmarks/

  # Security tests
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    needs: unit-tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install bandit safety

      - name: Run security tests
        run: |
          # Bandit security linter
          bandit -r data_pipeline/ -f json -o bandit-report.json

          # Safety check for known vulnerabilities
          safety check --json --output safety-report.json

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
