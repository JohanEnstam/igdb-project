# Continuous Integration Pipeline
# Runs on every push and pull request

name: CI Pipeline

on:
  push:
    branches: [main, develop]
    paths:
      - 'data_pipeline/**'
      - 'web_app/api/**'
      - 'shared/**'
      - '.github/workflows/ci.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'data_pipeline/**'
      - 'web_app/api/**'
      - 'shared/**'
      - '.github/workflows/ci.yml'

env:
  PYTHON_VERSION: '3.11'
  REGISTRY: europe-west1-docker.pkg.dev/igdb-recommendation-system/igdb-repo
  PROJECT_ID: igdb-recommendation-system

jobs:
  # Test all services
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-mock

      - name: Run linting
        run: |
          pip install flake8
          flake8 data_pipeline/ --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Run tests
        run: |
          pytest tests/ -v --cov=data_pipeline --cov-report=xml --cov-report=html

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  # Build Docker images
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    environment: staging
    needs: test

    strategy:
      matrix:
        service: [ingestion, processing, training, api]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Configure Docker for GCR
        run: gcloud auth configure-docker

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/igdb-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.service == 'api' && 'web_app/Dockerfile' || format('data_pipeline/{0}/Dockerfile', matrix.service) }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          if [ "${{ matrix.service }}" = "api" ]; then
            # Test API container health endpoint with GCP credentials
            docker run --rm -d --name test-api -p 8080:8080 \
              -e PORT=8080 \
              -e GOOGLE_APPLICATION_CREDENTIALS_JSON='${{ secrets.GCP_SA_KEY }}' \
              ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/igdb-${{ matrix.service }}:latest
            sleep 10
            curl -f http://localhost:8080/health || exit 1
            docker stop test-api
          else
            # Test other containers with --help
            docker run --rm ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/igdb-${{ matrix.service }}:latest --help
          fi

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety

      - name: Run Bandit security scan
        run: |
          bandit -r data_pipeline/ web_app/api/ shared/ -f json -o bandit-report.json || true
          bandit -r data_pipeline/ web_app/api/ shared/ -f txt

      - name: Run Safety check
        run: |
          safety check --json --output safety-report.json || true
          safety check

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
